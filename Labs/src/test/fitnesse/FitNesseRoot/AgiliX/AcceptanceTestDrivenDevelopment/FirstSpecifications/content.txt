!2 Exercise 2 - !-HelloWorld for FitNesse-!
Goal of this exercise is to create our first Slim table and fixture.

 1 Add a Hello World page with a !-SliM-! tabel to your <AgiliX.AcceptanceTestDrivenDevelopment.LearningTheWiki.SprintZero page. Think about which Slim table is best to use. The !-DecisionTable-! is the default used by !-FitNesse-!.
 2 Make Slim your test system by adding defining the following variable '''TEST_SYSTEM={slim}'''.
 3 Make the test fail.
 4 Create a !-HelloWorld-! class in your IDE and add a method to it that returns !-"Hello FitNesse"-!
 5 Make the test succeed!

!note Remember that !-FitNesse-! is a hierarchical Wiki.
!note Do not forget to add a path reference to your classes.
!note You can define your page to be of type '''Test''' by clicking on the page properties button and selecting '''Test'''.

!2 Exercise 3 - Create a test set for a simple calculator.
The goal of this exercise is to create a more complex Slim Table and fixture.
You will also use some additional tables and pages to organize your !-FitNesse-! pages.
!-Our SUT is a simple Java class that has various method for performing calculations.-!
!-Develop a SliM table that lets your Product Owner, and your team members express various test cases on the calculator.-!

A few examples...
{{{
Given a 1
And given a 2
When I press Plus
Then the result should be 3

Given a 3
and given a 5
When I press Times
Then the result should be 15
}}}

 1 Create a '''Decision''' table in your <AgiliX.AcceptanceTestDrivenDevelopment.LearningTheWiki.SprintZero.SimpleCalculatorSpecification page
 2 Make sure your table represents the above examples.
 3 Make the test fail.
 4 Create the Calculator Java class in your IDE.
 5 Make the test succeed.
 6 Use the import table to enable you to directly reference your Calculator class in your table.
 7 Move import table into a !-SetUp-! page.
 8 Everything should still work...


!2 Exercice 4 - Refactor your table and your class
The goal of this exercise is to get introduced to the '''Script''' table and see some differences between the '''Script''' and the '''Decision''' tables.

Remember that it's about communication and creating a common understanding on what needs to be developed.
Think from the perspective of the Product Owner and other team members when you design your table. They care about the behavior and the understanding of the test when using !-FitNesse-!. Keep implementation details out of your tabels.
 
 1 Create a '''Script''' table in your <AgiliX.AcceptanceTestDrivenDevelopment.LearningTheWiki.SprintZero.SimpleCalculatorSpecification page for your Calculator class representing the above examples. 
 2 Use the '''check''' keyword to match the calculation results.
 3 Make the test fail.
 4 Extend the Calculation class as needed to fit your expressive table.
 5 Make all the tests succeed.
 6 Refactor the Calculator class if needed or add a fixture class that separates the SUT from your table.
 7 Make all the tests succeed.
 8 Make the <AgiliX.AcceptanceTestDrivenDevelopment.LearningTheWiki.SprintZero page a Suite so that all tests are executed and reported together.
 9 Make the Suite work.

!see .FitNesse.UserGuide.SliM.ScriptTable for details on the  Script table.
